// Write a program, which sorts an array of integer elements using a "quick 
// sort" algorithm.

// Need to complete till Ch-10 Recursion

class SortUsingQuickSort
{
    static void Main()
    {
        int[] array1 = {3, 1, 2, 4, 9, 6};
        int[] array2 = {2, 1, 2, 4, 3, 5, 2, 6};
        int[] array3 = {53, 79, 33, 66, 52, 100, 3, 38, 97, 74, 93, 84, 43, 39, 16, 8, 51, 85, 19, 81, 47, 24, 9, 56, 30, 69, 55, 96, 57, 58, 46, 42, 76, 13, 78, 12, 41, 75, 40, 65, 61, 72, 71, 1, 5, 91, 64, 32, 73, 49, 10, 23, 2, 6, 31, 95, 36, 18, 15, 20, 68, 63, 34, 62, 98, 88, 29, 26, 7, 27, 80, 99, 87, 50, 59, 92, 83, 77, 21, 86, 37, 28, 54, 17, 11, 14, 4, 35, 82, 70, 90, 25, 22, 94, 89, 48, 45, 60, 67, 44};
        int[] array4 = {361, 575, 648, 596, 150, 660, 162, 555, 458, 124, 570, 879, 489, 548, 401, 686, 692, 221, 140, 650, 535, 177, 44, 666, 505, 952, 87, 799, 1000, 41, 567, 414, 157, 571, 310, 49, 627, 962, 703, 524, 945, 715, 556, 227, 264, 506, 47, 972, 330, 319, 201, 232, 62, 515, 96, 141, 480, 104, 21, 683, 90, 175, 632, 160, 317, 77, 343, 846, 684, 531, 446, 377, 708, 926, 66, 812, 99, 242, 324, 138, 667, 235, 421, 504, 743, 578, 909, 363, 784, 661, 63, 843, 560, 326, 543, 178, 861, 558, 622, 183, 855, 932, 730, 830, 530, 223, 943, 117, 344, 460, 895, 334, 612, 760, 482, 675, 389, 266, 668, 228, 566, 37, 72, 824, 757, 207, 253, 123, 628, 461, 102, 664, 376, 132, 595, 305, 598, 270, 129, 237, 24, 303, 14, 431, 511, 135, 209, 424, 922, 565, 174, 796, 495, 300, 808, 472, 418, 288, 947, 507, 500, 877, 27, 370, 468, 148, 539, 9, 771, 786, 795, 293, 863, 474, 451, 92, 315, 745, 752, 71, 907, 633, 601, 508, 941, 136, 516, 924, 255, 995, 554, 12, 8, 28, 36, 874, 211, 20, 113, 196, 777, 631, 218, 931, 197, 204, 997, 277, 478, 927, 214, 234, 850, 198, 341, 860, 229, 325, 101, 80, 287, 320, 181, 672, 358, 646, 217, 956, 437, 257, 233, 942, 250, 848, 411, 898, 74, 166, 547, 276, 84, 465, 769, 852, 665, 509, 647, 763, 438, 734, 662, 128, 490, 726, 514, 965, 994, 916, 974, 934, 189, 840, 383, 91, 337, 475, 999, 455, 202, 935, 409, 351, 534, 719, 285, 762, 158, 867, 803, 368, 781, 348, 759, 483, 739, 220, 584, 884, 420, 463, 134, 519, 788, 727, 776, 40, 521, 169, 7, 130, 261, 929, 308, 989, 417, 283, 536, 147, 676, 621, 532, 284, 655, 620, 274, 644, 154, 481, 501, 553, 48, 766, 238, 851, 203, 296, 491, 817, 869, 791, 443, 114, 737, 5, 23, 827, 991, 964, 52, 694, 375, 328, 640, 346, 89, 604, 925, 397, 471, 597, 258, 988, 720, 958, 639, 820, 494, 13, 434, 251, 725, 387, 731, 11, 386, 380, 447, 826, 787, 226, 811, 681, 900, 444, 834, 770, 435, 186, 586, 714, 744, 231, 107, 407, 641, 329, 880, 121, 497, 309, 449, 588, 345, 382, 930, 562, 275, 10, 669, 378, 955, 206, 100, 894, 133, 875, 105, 645, 212, 802, 990, 412, 492, 476, 721, 656, 902, 671, 271, 614, 616, 399, 890, 903, 818, 224, 876, 610, 18, 439, 937, 164, 949, 125, 685, 297, 110, 452, 115, 184, 94, 987, 56, 31, 693, 822, 710, 39, 782, 576, 697, 364, 17, 825, 835, 518, 870, 936, 340, 767, 793, 590, 513, 82, 702, 828, 396, 440, 466, 975, 200, 29, 682, 836, 699, 527, 813, 748, 831, 111, 577, 347, 864, 591, 969, 395, 45, 923, 441, 254, 301, 959, 914, 569, 35, 225, 43, 807, 982, 245, 98, 464, 53, 488, 155, 332, 823, 338, 51, 728, 954, 6, 618, 289, 944, 712, 316, 779, 430, 127, 845, 780, 961, 79, 873, 768, 57, 161, 323, 839, 918, 761, 625, 445, 619, 921, 749, 19, 735, 281, 732, 985, 485, 69, 267, 280, 179, 137, 976, 168, 173, 917, 626, 704, 589, 357, 398, 286, 953, 42, 67, 526, 93, 623, 691, 252, 888, 893, 552, 76, 126, 54, 711, 919, 263, 709, 951, 163, 433, 268, 34, 658, 593, 415, 314, 304, 467, 753, 946, 360, 677, 865, 241, 194, 859, 993, 906, 333, 15, 634, 854, 585, 248, 3, 651, 403, 374, 678, 609, 187, 643, 279, 603, 384, 1, 887, 170, 373, 754, 30, 342, 545, 738, 156, 837, 615, 538, 413, 654, 372, 167, 885, 783, 454, 801, 559, 406, 366, 537, 653, 70, 282, 22, 986, 833, 740, 180, 755, 236, 805, 256, 637, 858, 152, 579, 426, 311, 171, 109, 886, 97, 758, 352, 306, 400, 327, 819, 477, 350, 246, 188, 290, 638, 679, 512, 182, 25, 393, 95, 349, 905, 896, 716, 456, 696, 362, 379, 698, 339, 419, 502, 729, 950, 528, 849, 573, 963, 592, 239, 892, 244, 746, 600, 821, 957, 195, 747, 292, 68, 139, 106, 355, 385, 980, 523, 222, 496, 973, 882, 176, 503, 291, 86, 750, 520, 607, 390, 498, 977, 165, 920, 371, 75, 764, 587, 392, 717, 608, 883, 736, 108, 742, 336, 690, 146, 191, 131, 533, 145, 594, 674, 871, 838, 680, 568, 928, 307, 967, 794, 857, 705, 525, 652, 542, 192, 915, 450, 718, 549, 948, 706, 599, 116, 208, 153, 881, 687, 529, 249, 120, 984, 778, 64, 901, 219, 606, 756, 193, 356, 940, 230, 912, 55, 583, 142, 4, 199, 856, 312, 262, 354, 798, 457, 983, 772, 971, 118, 487, 814, 908, 144, 299, 388, 46, 278, 689, 404, 868, 442, 73, 815, 979, 765, 16, 816, 624, 889, 841, 213, 862, 410, 707, 318, 429, 81, 122, 713, 453, 205, 58, 402, 459, 741, 847, 484, 789, 611, 629, 785, 448, 88, 564, 493, 970, 61, 872, 541, 897, 428, 32, 298, 26, 723, 365, 462, 809, 913, 792, 649, 966, 910, 724, 259, 960, 321, 978, 574, 911, 522, 432, 359, 722, 151, 673, 65, 550, 695, 273, 572, 939, 775, 473, 563, 773, 391, 423, 172, 260, 353, 499, 215, 408, 425, 265, 617, 269, 602, 797, 295, 790, 405, 844, 659, 159, 605, 582, 580, 369, 335, 367, 751, 700, 832, 670, 272, 149, 247, 800, 185, 642, 427, 479, 394, 83, 657, 243, 544, 416, 866, 85, 510, 968, 635, 381, 517, 829, 103, 486, 701, 663, 322, 774, 119, 470, 878, 33, 143, 842, 561, 630, 59, 331, 78, 60, 422, 804, 436, 190, 733, 294, 938, 313, 998, 50, 38, 2, 302, 981, 853, 112, 613, 992, 540, 210, 581, 904, 546, 557, 996, 933, 636, 551, 240, 688, 891, 806, 810, 469, 216, 899};

        int[] sorted = Sort(array4);

        Console.WriteLine("Given array:");
        PrintArray(array4);
        Console.WriteLine();
        Console.WriteLine("Sorted array:");
        PrintArray(sorted);
        Console.WriteLine();
        Console.WriteLine("Given array:");
        PrintArray(array4);
    }


    static void PrintArray(int[] myArray)
    {
        // Method to print given array

        foreach(int i in myArray)
        {
            Console.Write($"{i} ");
        }

        Console.WriteLine();
    }


    static int[] Sort(int[] myArray)
    {
        // Method to return sorted array from given array

        int len = myArray.Length;
        int[] sorted = new int[len];

        CopyValuesTo(sorted, myArray);
        QuickSort(sorted, 0, len);

        return sorted;
    }


    static void CopyValuesTo(int[] A, int[] B)
    {
        // Method to copy values to array A from B
        // Both arrays should have same length

        for(int i = 0; i < A.Length; i++)
        {
            A[i] = B[i];
        }
    }


    static void QuickSort(int[] myArray, int start, int end)
    {
        // Method to sort given array using quick sort
        // start is inclusive
        // end is exclusive

        if(end - start <= 1)
        {
            return;
        }

        int pivotIndex = end - 1;

        pivotIndex = ReorderElements(myArray, start, end, pivotIndex);
        QuickSort(myArray, start, pivotIndex); // sort left side of pivotIndex
        QuickSort(myArray, pivotIndex+1, end); // sort right side of pivotIndex
    }


    static int ReorderElements(int[] myArray, int start, int end, int pivotIndex)
    {
        // Method to reorder elements of array around pivot element
        // Put all elements greater than pivot element to the right of pivot
        // element

        for(int i = start; i < pivotIndex; i++)
        {
            if(myArray[i] > myArray[pivotIndex])
            {
                Swap(myArray, i, pivotIndex-1);
                Swap(myArray, pivotIndex-1, pivotIndex);
                pivotIndex -= 1;
                i -= 1;
            }
        }

        return pivotIndex;
    }


    static void Swap(int[] myArray, int i, int j)
    {
        // Method to swap elements of given array

        int temp = myArray[i];
        myArray[i] = myArray[j];
        myArray[j] = temp;
    }
}